% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/task_list.R
\name{TaskList}
\alias{TaskList}
\title{R6 class storing a task list}
\description{
R6 class storing a task list

R6 class storing a task list
}
\details{
The TaskList class is used as a storage class. It provides a container that
holds a collection of Task objects, along with a collection of methods for
adding, removing, and getting Tasks. It can also report on the status of the
Tasks contained within the list and retrieve results from those Tasks. What
it cannot do is manage interactions with Workers or arrange for the Tasks to
be executed. That's the job of the Queue.
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-TaskList-new}{\code{TaskList$new()}}
\item \href{#method-TaskList-length}{\code{TaskList$length()}}
\item \href{#method-TaskList-add_task}{\code{TaskList$add_task()}}
\item \href{#method-TaskList-remove_task}{\code{TaskList$remove_task()}}
\item \href{#method-TaskList-get_task}{\code{TaskList$get_task()}}
\item \href{#method-TaskList-get_state}{\code{TaskList$get_state()}}
\item \href{#method-TaskList-get_tasks_in_state}{\code{TaskList$get_tasks_in_state()}}
\item \href{#method-TaskList-retrieve}{\code{TaskList$retrieve()}}
\item \href{#method-TaskList-clone}{\code{TaskList$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskList-new"></a>}}
\if{latex}{\out{\hypertarget{method-TaskList-new}{}}}
\subsection{Method \code{new()}}{
Create a new task list
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskList$new()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskList-length"></a>}}
\if{latex}{\out{\hypertarget{method-TaskList-length}{}}}
\subsection{Method \code{length()}}{
Return the number of tasks in the list
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskList$length()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Integer
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskList-add_task"></a>}}
\if{latex}{\out{\hypertarget{method-TaskList-add_task}{}}}
\subsection{Method \code{add_task()}}{
Add a task to the \code{TaskList}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskList$add_task(task)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{task}}{The \code{Task} object to be added}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskList-remove_task"></a>}}
\if{latex}{\out{\hypertarget{method-TaskList-remove_task}{}}}
\subsection{Method \code{remove_task()}}{
This method removes one or more tasks from the \code{TaskList}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskList$remove_task(x)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{Indices of the tasks to be removed}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskList-get_task"></a>}}
\if{latex}{\out{\hypertarget{method-TaskList-get_task}{}}}
\subsection{Method \code{get_task()}}{
Return a single \code{Task} contained in the \code{TaskList}. The
\code{Task} is not removed from the \code{TaskList}, and has reference semantics:
if the listed task is completed by a \code{Worker}, then the status of any
\code{Task} returned by this method will update automatically
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskList$get_task(x)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{The index the task to return}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A \code{Task} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskList-get_state"></a>}}
\if{latex}{\out{\hypertarget{method-TaskList-get_state}{}}}
\subsection{Method \code{get_state()}}{
Return the status of all tasks in the \code{TaskList}. If
requested, this method will also display messages summarising the
current state of the tasks, and any tasks that have completed since
the last time a status was returned. This messaging system is called
by \code{Queue} objects as they work on a tasks
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskList$get_state(message = "none", finished_in = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{message}}{Character specifying what type of message to display:
"none" (the default), "minimal", or "verbose"}

\item{\code{finished_in}}{A numeric value or a difftime specifying how long
the tasks have taken to complete. This argument is only used when
displaying messages, and it is used only to trigger the display of a
tidy "all tasks completed" style message. It is purely cosmetic and
does not affect the task status.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A character vector specifying the completion status for all
listed tasks
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskList-get_tasks_in_state"></a>}}
\if{latex}{\out{\hypertarget{method-TaskList-get_tasks_in_state}{}}}
\subsection{Method \code{get_tasks_in_state()}}{
Return a list of tasks in a given state
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskList$get_tasks_in_state(x)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{The name of the state (e.g., "waiting")}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A \code{TaskList} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskList-retrieve"></a>}}
\if{latex}{\out{\hypertarget{method-TaskList-retrieve}{}}}
\subsection{Method \code{retrieve()}}{
Retrieve the full state of the tasks in tidy form. If
all tasks have completed this output is the same as the output as the
\code{run()} method for a \code{Queue} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskList$retrieve()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Returns a tibble containing the results of all executed tasks and
various other useful metadata. Incomplete tasks may have missing data.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskList-clone"></a>}}
\if{latex}{\out{\hypertarget{method-TaskList-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskList$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
