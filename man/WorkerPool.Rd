% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/worker_pool.R
\name{WorkerPool}
\alias{WorkerPool}
\title{R6 class storing a pool of workers}
\description{
R6 class storing a pool of workers

R6 class storing a pool of workers
}
\details{
A WorkerPool is a container that holds one or more workers and can request
them to assign tasks, start tasks, and complete tasks. It can also check to
see if any worker sessions have crashed and restart them as needed.
fields and methods that allow it to work on Tasks
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-WorkerPool-new}{\code{WorkerPool$new()}}
\item \href{#method-WorkerPool-get_pool_worker}{\code{WorkerPool$get_pool_worker()}}
\item \href{#method-WorkerPool-get_pool_state}{\code{WorkerPool$get_pool_state()}}
\item \href{#method-WorkerPool-try_assign}{\code{WorkerPool$try_assign()}}
\item \href{#method-WorkerPool-try_start}{\code{WorkerPool$try_start()}}
\item \href{#method-WorkerPool-try_finish}{\code{WorkerPool$try_finish()}}
\item \href{#method-WorkerPool-refill_pool}{\code{WorkerPool$refill_pool()}}
\item \href{#method-WorkerPool-shutdown_pool}{\code{WorkerPool$shutdown_pool()}}
\item \href{#method-WorkerPool-shutdown_overdue_workers}{\code{WorkerPool$shutdown_overdue_workers()}}
\item \href{#method-WorkerPool-clone}{\code{WorkerPool$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WorkerPool-new"></a>}}
\if{latex}{\out{\hypertarget{method-WorkerPool-new}{}}}
\subsection{Method \code{new()}}{
Create a new worker pool
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WorkerPool$new(workers = 4L)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{workers}}{The number of workers in the pool.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new \code{WorkerPool} object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WorkerPool-get_pool_worker"></a>}}
\if{latex}{\out{\hypertarget{method-WorkerPool-get_pool_worker}{}}}
\subsection{Method \code{get_pool_worker()}}{
Return a specific worker
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WorkerPool$get_pool_worker(ind)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{ind}}{The index of the worker in the pool}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The corresponding \code{Worker} object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WorkerPool-get_pool_state"></a>}}
\if{latex}{\out{\hypertarget{method-WorkerPool-get_pool_state}{}}}
\subsection{Method \code{get_pool_state()}}{
Return a simple summary of the worker pool
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WorkerPool$get_pool_state()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A named character vector specifying the current state
of each worker ("starting", "idle", "busy", or "finished"). Names
denote worker ids
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WorkerPool-try_assign"></a>}}
\if{latex}{\out{\hypertarget{method-WorkerPool-try_assign}{}}}
\subsection{Method \code{try_assign()}}{
Attempt to assign tasks to workers. This method is
intended to be called by \code{Queue} objects.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WorkerPool$try_assign(tasks)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{tasks}}{A list of \code{Task} objects}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisibly returns \code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WorkerPool-try_start"></a>}}
\if{latex}{\out{\hypertarget{method-WorkerPool-try_start}{}}}
\subsection{Method \code{try_start()}}{
Attempt to start any assigned but not-yet-started tasks
in the worker pool. This method is intended to be called by \code{Queue}
objects.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WorkerPool$try_start()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Invisibly returns \code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WorkerPool-try_finish"></a>}}
\if{latex}{\out{\hypertarget{method-WorkerPool-try_finish}{}}}
\subsection{Method \code{try_finish()}}{
Attempt to finish any started but not-yet-returned tasks
in the worker pool. This method is intended to be called by \code{Queue}
objects.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WorkerPool$try_finish()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Invisibly returns \code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WorkerPool-refill_pool"></a>}}
\if{latex}{\out{\hypertarget{method-WorkerPool-refill_pool}{}}}
\subsection{Method \code{refill_pool()}}{
Check all workers in the pool looking for workers that
have crashed or been shutdown, and replace them with fresh workers.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WorkerPool$refill_pool()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
This function is called primarily for its side effect. It
returns a named character documenting the outcome, indicating the
current state of each worker: should not be "finished" for any worker.
Names denote worker ids.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WorkerPool-shutdown_pool"></a>}}
\if{latex}{\out{\hypertarget{method-WorkerPool-shutdown_pool}{}}}
\subsection{Method \code{shutdown_pool()}}{
Terminate all workers in the worker pool.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WorkerPool$shutdown_pool(grace = 1000)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{grace}}{Grace period in milliseconds. If a worker process is still
running after this period, it will be killed.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
This function is called primarily for its side effect. It
returns a named character documenting the outcome, indicating the
current state of each worker: should be "finished" for all workers.
Names denote worker ids.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WorkerPool-shutdown_overdue_workers"></a>}}
\if{latex}{\out{\hypertarget{method-WorkerPool-shutdown_overdue_workers}{}}}
\subsection{Method \code{shutdown_overdue_workers()}}{
Terminate workers that have worked on their current task
for longer than a pre-specified time limit.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WorkerPool$shutdown_overdue_workers(timelimit, grace = 1000)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{timelimit}}{Pre-specified time limit for the task, in seconds.}

\item{\code{grace}}{Grace period for the shutdown, in milliseconds. If a
worker process is still running after this period, it will be killed.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
This function is called primarily for its side effect. It
returns a named character documenting the outcome, indicating the
current state of each worker: should be "finished" for all workers.
Names denote worker ids.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WorkerPool-clone"></a>}}
\if{latex}{\out{\hypertarget{method-WorkerPool-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WorkerPool$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
