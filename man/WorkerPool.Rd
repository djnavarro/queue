% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/worker_pool.R
\name{WorkerPool}
\alias{WorkerPool}
\title{R6 Class Representing a Worker Pool}
\description{
A \code{WorkerPool} manages multiple workers.
}
\details{
The implementation for a \code{WorkerPool} is essentially a container that holds
one or more \code{Worker} objects, and posesses methods that allow it to instruct
them to assign, start, and complete \code{Task}s. It can also check to
see if any of the R sessions associated with the \code{Worker}s have crashed or
stalled, and replace them as needed.
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-WorkerPool-new}{\code{WorkerPool$new()}}
\item \href{#method-WorkerPool-get_pool_worker}{\code{WorkerPool$get_pool_worker()}}
\item \href{#method-WorkerPool-get_pool_state}{\code{WorkerPool$get_pool_state()}}
\item \href{#method-WorkerPool-try_assign}{\code{WorkerPool$try_assign()}}
\item \href{#method-WorkerPool-try_start}{\code{WorkerPool$try_start()}}
\item \href{#method-WorkerPool-try_finish}{\code{WorkerPool$try_finish()}}
\item \href{#method-WorkerPool-refill_pool}{\code{WorkerPool$refill_pool()}}
\item \href{#method-WorkerPool-shutdown_pool}{\code{WorkerPool$shutdown_pool()}}
\item \href{#method-WorkerPool-shutdown_overdue_workers}{\code{WorkerPool$shutdown_overdue_workers()}}
\item \href{#method-WorkerPool-clone}{\code{WorkerPool$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WorkerPool-new"></a>}}
\if{latex}{\out{\hypertarget{method-WorkerPool-new}{}}}
\subsection{Method \code{new()}}{
Create a new worker pool
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WorkerPool$new(workers = 4L)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{workers}}{The number of workers in the pool.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new \code{WorkerPool} object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WorkerPool-get_pool_worker"></a>}}
\if{latex}{\out{\hypertarget{method-WorkerPool-get_pool_worker}{}}}
\subsection{Method \code{get_pool_worker()}}{
Return a specific \code{Worker}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WorkerPool$get_pool_worker(x)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{An integer specifying the index of the worker in the pool.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The corresponding \code{Worker} object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WorkerPool-get_pool_state"></a>}}
\if{latex}{\out{\hypertarget{method-WorkerPool-get_pool_state}{}}}
\subsection{Method \code{get_pool_state()}}{
Return a summary of the worker pool
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WorkerPool$get_pool_state()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A named character vector specifying the current state
of each worker ("starting", "idle", "busy", or "finished"). Names
denote worker ids, and the interpretations of each return value is as
follows:
\itemize{
\item \code{"starting"}: the R session is starting up.
\item \code{"idle"}: the R session is ready to compute.
\item \code{"busy"}: the R session is computing.
\item \code{"finished"}: the R session has terminated.
}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WorkerPool-try_assign"></a>}}
\if{latex}{\out{\hypertarget{method-WorkerPool-try_assign}{}}}
\subsection{Method \code{try_assign()}}{
Attempt to assign tasks to workers. This method is
intended to be called by \code{Queue} objects. When called, this method
will iterate over tasks in the list and workers in the pool, assigning
tasks to workers as long as there are both idle workers and waiting
tasks. It returns once it runs out of one resource or the other. Note
that this method assigns tasks to workers: it does not instruct the
workers to to start working on the tasks. That is the job of
\code{try_start()}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WorkerPool$try_assign(tasks)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{tasks}}{A \code{TaskList} object}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisibly returns \code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WorkerPool-try_start"></a>}}
\if{latex}{\out{\hypertarget{method-WorkerPool-try_start}{}}}
\subsection{Method \code{try_start()}}{
Iterates over \code{Workers} in the pool and asks them to
start any jobs that the have been assigned but have not yet started.
This method is intended to be called by \code{Queue} objects.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WorkerPool$try_start()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Invisibly returns \code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WorkerPool-try_finish"></a>}}
\if{latex}{\out{\hypertarget{method-WorkerPool-try_finish}{}}}
\subsection{Method \code{try_finish()}}{
Iterate over \code{Workers} in the pool and checks to see if
any of the busy sessions are ready to return results. For those that
are, it finishes the tasks and ensures those results are returned to
the \code{Task} object. This method is intended to be called by \code{Queue}
objects.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WorkerPool$try_finish()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Invisibly returns \code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WorkerPool-refill_pool"></a>}}
\if{latex}{\out{\hypertarget{method-WorkerPool-refill_pool}{}}}
\subsection{Method \code{refill_pool()}}{
Check the \code{WorkerPool} looking for \code{Workers} that
have crashed or been shutdown, and replace them with fresh workers.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WorkerPool$refill_pool()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
This function is called primarily for its side effect. It
returns a named character documenting the outcome, indicating the
current state of each worker: should not be "finished" for any worker.
Names denote worker ids.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WorkerPool-shutdown_pool"></a>}}
\if{latex}{\out{\hypertarget{method-WorkerPool-shutdown_pool}{}}}
\subsection{Method \code{shutdown_pool()}}{
Terminate all workers in the pool.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WorkerPool$shutdown_pool(grace = 1000)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{grace}}{Grace period in milliseconds. If a worker process is still
running after this period, it will be killed.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
This function is called primarily for its side effect. It
returns a named character documenting the outcome, indicating the
current state of each worker: should be "finished" for all workers.
Names denote worker ids.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WorkerPool-shutdown_overdue_workers"></a>}}
\if{latex}{\out{\hypertarget{method-WorkerPool-shutdown_overdue_workers}{}}}
\subsection{Method \code{shutdown_overdue_workers()}}{
Terminate workers that have worked on their current task
for longer than a pre-specified time limit.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WorkerPool$shutdown_overdue_workers(timelimit, grace = 1000)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{timelimit}}{Pre-specified time limit for the task, in seconds.}

\item{\code{grace}}{Grace period for the shutdown, in milliseconds. If a
worker process is still running after this period, it will be killed.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
This function is called primarily for its side effect. It
returns a named character documenting the outcome, indicating the
current state of each worker: should be "finished" for all workers.
Names denote worker ids.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WorkerPool-clone"></a>}}
\if{latex}{\out{\hypertarget{method-WorkerPool-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WorkerPool$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
