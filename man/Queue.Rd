% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/queue.R
\name{Queue}
\alias{Queue}
\title{R6 class for a multi-worker task queue}
\description{
R6 class for a multi-worker task queue

R6 class for a multi-worker task queue
}
\details{
Documentation baby...
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Queue-new}{\code{Queue$new()}}
\item \href{#method-Queue-add}{\code{Queue$add()}}
\item \href{#method-Queue-run}{\code{Queue$run()}}
\item \href{#method-Queue-get_workers}{\code{Queue$get_workers()}}
\item \href{#method-Queue-get_tasks}{\code{Queue$get_tasks()}}
\item \href{#method-Queue-clone}{\code{Queue$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Queue-new"></a>}}
\if{latex}{\out{\hypertarget{method-Queue-new}{}}}
\subsection{Method \code{new()}}{
Create a task queue
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Queue$new(workers = 4L)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{workers}}{Either the number of workers to employ in the task queue,
or a \code{WorkerPool} object to use when deploying the tasks.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new \code{Queue} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Queue-add"></a>}}
\if{latex}{\out{\hypertarget{method-Queue-add}{}}}
\subsection{Method \code{add()}}{
Adds a task to the queue
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Queue$add(fun, args = list(), id = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{fun}}{The function to be called when the task is scheduled}

\item{\code{args}}{A list of arguments to be passed to the task function (optional)}

\item{\code{id}}{A string specifying a unique identifier for the task (optional: tasks
will be named "task_1", "task_2", etc if this is unspecified)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisibly returns the \code{Task} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Queue-run"></a>}}
\if{latex}{\out{\hypertarget{method-Queue-run}{}}}
\subsection{Method \code{run()}}{
Execute tasks in parallel using the worker pool, assigning
tasks to workers in the same order in which they were added to the queue
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Queue$run(
  timelimit = 60,
  message = "minimal",
  interval = 0.05,
  shutdown = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{timelimit}}{How long (in seconds) should the worker pool wait for a
task to complete before terminating the child process and moving onto the
next task? (default is 60 seconds, but this is fairly arbitrary)}

\item{\code{message}}{What messages should be reported by the queue while it is
running? Options are "none" (no messages), "minimal" (a spinner is shown
alongside counts of waiting, running, and completed tasks), and "verbose"
(in addition to the spinner, each task is summarized as it completes).
Default is "minimal".}

\item{\code{interval}}{How often should the task queue poll the workers to see
if they have finished their assigned tasks? Specified in seconds.}

\item{\code{shutdown}}{Should the workers in the pool be shut down (i.e., all
R sessions closed) once the tasks are completed. Defaults to \code{TRUE}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Returns a tibble containing the results of all tasks and
various other useful metadata. Contains one row per task in the
\code{Queue}, and the following columns:
\itemize{
\item \code{task_id} A character string specifying the task identifiers
\item \code{worker_id} An integer specifying the worker process ids (pid)
\item \code{state} A character string indicating the status of each task
("created", "waiting", "assigned", "running", or "done")
\item \code{result} A list containing the function outputs, or NULL
\item \code{runtime} Completion time for the task (NA if the task is not done)
\item \code{fun} A list containing the functions
\item \code{args} A list containing the arguments passed to each function
\item \code{created} The time at which each task was created
\item \code{queued} The time at which each task was added to a \code{Queue}
\item \code{assigned} The time at which each task was assigned to a \code{Worker}
\item \code{started} The time at which a \code{Worker} called each function
\item \code{finished} The time at which a \code{Worker} output was returned for the task
\item \code{code} The status code returned by the callr R session (integer)
\item \code{message} The message returned by the callr R session (character)
\item \code{stdout} List column containing the contents of stdout during function execution
\item \code{stderr} List column containing the contents of stderr during function execution
\item \code{error}  List column containing \code{NULL} values
}

Note: at present there is one field from the callr rsession::read() method
that isn't captured here, and that's the error field. I'll add that after
I've finished wrapping my head around what that actually does. The \code{error}
column, at present, is included only as a placeholder
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Queue-get_workers"></a>}}
\if{latex}{\out{\hypertarget{method-Queue-get_workers}{}}}
\subsection{Method \code{get_workers()}}{
Retrieve the workers
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Queue$get_workers()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A \code{WorkerPool} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Queue-get_tasks"></a>}}
\if{latex}{\out{\hypertarget{method-Queue-get_tasks}{}}}
\subsection{Method \code{get_tasks()}}{
Retrieve the tasks
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Queue$get_tasks()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A \code{TaskList} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Queue-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Queue-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Queue$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
