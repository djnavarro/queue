[{"path":"http://queue.djnavarro.net/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 queue authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://queue.djnavarro.net/articles/queue.html","id":"another-parallel-computing-tool","dir":"Articles","previous_headings":"","what":"Another parallel computing tool","title":"queue","text":"Anyone familiar R ecosystem knows already many good tools purpose. queue package isn’t intended replacement sophisticated distributed computing tools like futureverse (even close!). intended replacement session management tools like callr, upon queue built. find needing flexible, highly performant tools, recommend options thoroughly. reason queue exists , well, sometimes ’s nice adorably simple alternative. everyone R community time expertise learn use fancy, us laptop, laptop bunch cores sometimes forget use. mind, queue deliberately simple tool minimum features. Also – ’ll honest, real reason exists – wanted excuse make sure really understood callr R6 felt like good side project .","code":""},{"path":"http://queue.djnavarro.net/articles/queue.html","id":"basic-usage","dir":"Articles","previous_headings":"","what":"Basic usage","title":"queue","text":"queue package adopts encapsulated object-oriented programming style, uses R6 classes manage task queues. primary class package Queue. new task queue created also initialises new WorkerPool, collection R sessions tasks executed. can set number workers initialisation: Tasks pushed queue calling ’s add() method. task function list arguments. example , wait() function sleeps specified length time returns input. ’ll queue 10 jobs pause different lengths time: execute tasks calling run() method: output stored tibble contains fairly detailed representation everything happened execution queue, including time stamps, messages printed R console execution function, : results function call always stored list column called result general ’s guarantee arbitrary collection tasks return results consistent , case , can check results like : default, worker sessions shutdown queue completes, user doesn’t take care , can override reuse single WorkerPool across one Queue want. See classs documentation details.","code":"library(queue) queue <- Queue$new(workers = 4) wait <- function(x) {   Sys.sleep(x)   x } for(i in 1:10) {   queue$add(wait, list(x = i/10)) } out <- queue$run(message = \"verbose\") #> → Task done: task_1 (0.22s) #> → Task done: task_2 (0.29s) #> → Task done: task_3 (0.38s) #> → Task done: task_4 (0.43s) #> → Task done: task_5 (0.57s) #> → Task done: task_6 (0.67s) #> → Task done: task_7 (0.78s) #> → Task done: task_8 (0.88s) #> → Task done: task_9 (0.98s) #> → Task done: task_10 (1.07s) #> ✔ Queue complete: 10 tasks done (2.06s) out #> # A tibble: 10 × 17 #>    task_id worker_id state result runtime fun   args         created             #>    <chr>       <int> <chr> <list> <drtn>  <lis> <list>       <dttm>              #>  1 task_1       6660 done  <dbl>  0.2193… <fn>  <named list> 2022-12-21 06:46:30 #>  2 task_2       6674 done  <dbl>  0.2880… <fn>  <named list> 2022-12-21 06:46:30 #>  3 task_3       6684 done  <dbl>  0.3785… <fn>  <named list> 2022-12-21 06:46:30 #>  4 task_4       6699 done  <dbl>  0.4295… <fn>  <named list> 2022-12-21 06:46:30 #>  5 task_5       6660 done  <dbl>  0.5736… <fn>  <named list> 2022-12-21 06:46:30 #>  6 task_6       6674 done  <dbl>  0.6660… <fn>  <named list> 2022-12-21 06:46:30 #>  7 task_7       6684 done  <dbl>  0.7801… <fn>  <named list> 2022-12-21 06:46:30 #>  8 task_8       6699 done  <dbl>  0.8800… <fn>  <named list> 2022-12-21 06:46:30 #>  9 task_9       6660 done  <dbl>  0.9751… <fn>  <named list> 2022-12-21 06:46:30 #> 10 task_10      6674 done  <dbl>  1.0684… <fn>  <named list> 2022-12-21 06:46:30 #> # … with 9 more variables: queued <dttm>, assigned <dttm>, started <dttm>, #> #   finished <dttm>, code <int>, message <chr>, stdout <list>, stderr <list>, #> #   error <list> unlist(out$result) #>  [1] 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0"},{"path":"http://queue.djnavarro.net/articles/queue.html","id":"implementation-detail","dir":"Articles","previous_headings":"","what":"Implementation detail","title":"queue","text":"user point view Queue objects useful part package, internally work devolved classes. Specifically, package built top two abstractions: Task objects provide storage class: hold function, arguments, output, variety metadata. Worker class provides representation external R session ability execute manage Task using session. Internally, Worker class relies callr::r_session. allow Queue execute multiple jobs parallel, two additional classes provided queue package: TaskList object container holds multiple Task objects methods working , similarly WorkerPool container multiple Worker objects tools working . Queue associated WorkerPool TaskList, methods return , ever need play around internal data structures.","code":""},{"path":"http://queue.djnavarro.net/articles/queue.html","id":"crash-resistance","dir":"Articles","previous_headings":"","what":"Crash resistance","title":"queue","text":"queue package isn’t sophisticated detecting sessions crashed, . simplicity, let’s define function guaranteed crash R session soon called: Now let’s define queue two workers, less three tasks guaranteed crash worker moment tasks started: queue allocates task first-first-order, three “crash tasks” guaranteed allocated final “wait task”. Let’s take look happens queue runs: ’s little slower ’d hope, finish valid tasks returns nothing tasks crashed R sessions. happened background Queue runs simple scheduler asks WorkerPool check R sessions crashed, initialises new Worker objects replace happens. even pretense optimised, work.","code":"crash <- function(x) .Call(\"abort\") queue <- Queue$new(workers = 2) queue$add(wait, list(x = .1)) queue$add(crash) queue$add(crash) queue$add(crash) queue$add(wait, list(x = .1)) queue$run() #> ✔ Queue complete: 5 tasks done (4.08s) #> # A tibble: 5 × 17 #>   task_id worker_id state result runtime  fun   args         created             #>   <chr>       <int> <chr> <list> <drtn>   <lis> <list>       <dttm>              #> 1 task_1       6730 done  <dbl>  0.16878… <fn>  <named list> 2022-12-21 06:46:33 #> 2 task_2       6744 done  <NULL> 3.00899… <fn>  <list [0]>   2022-12-21 06:46:33 #> 3 task_3       6730 done  <NULL> 3.17794… <fn>  <list [0]>   2022-12-21 06:46:33 #> 4 task_4       6762 done  <NULL> 0.43273… <fn>  <list [0]>   2022-12-21 06:46:33 #> 5 task_5       6776 done  <dbl>  0.40207… <fn>  <named list> 2022-12-21 06:46:33 #> # … with 9 more variables: queued <dttm>, assigned <dttm>, started <dttm>, #> #   finished <dttm>, code <dbl>, message <chr>, stdout <list>, stderr <list>, #> #   error <list>"},{"path":"http://queue.djnavarro.net/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Danielle Navarro. Author, maintainer.","code":""},{"path":"http://queue.djnavarro.net/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Navarro D (2022). queue: Simple Multi-Threaded Task Queuing. https://github.com/djnavarro/queue, http://djnavarro.net/queue/.","code":"@Manual{,   title = {queue: Simple Multi-Threaded Task Queuing},   author = {Danielle Navarro},   year = {2022},   note = {https://github.com/djnavarro/queue, http://djnavarro.net/queue/}, }"},{"path":"http://queue.djnavarro.net/index.html","id":"queue","dir":"","previous_headings":"","what":"Simple Multi-Threaded Task Queuing","title":"Simple Multi-Threaded Task Queuing","text":"Sometimes want “everything, everywhere, ”. happens ’s awfully convenient easy--use tools execute R code parallel across multiple R sessions. ’s goal queue package. provides clean interface implementing multi-worker task queues R doesn’t ask user much work.","code":""},{"path":"http://queue.djnavarro.net/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Simple Multi-Threaded Task Queuing","text":"can install development version queue like :","code":"remotes::install_github(\"djnavarro/queue\")"},{"path":"http://queue.djnavarro.net/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Simple Multi-Threaded Task Queuing","text":"queue package adopts encapsulated object-oriented programming style, uses R6 classes manage task queues. primary class package Queue. new task queue created also initialises new WorkerPool, collection R sessions tasks executed. can set number workers initialisation: Tasks pushed queue calling ’s add() method. task function list arguments. example , wait() function sleeps specified length time returns input. ’ll queue 10 jobs pause different lengths time: execute tasks calling run() method: output stored tibble contains fairly detailed representation everything happened execution queue, including time stamps, messages printed R console execution function, : results function call always stored list column called result general ’s guarantee arbitrary collection tasks return results consistent , case , can check results like :","code":"library(queue) queue <- Queue$new(workers = 4) wait <- function(x) {   Sys.sleep(x)   x } for(i in 1:10) {   queue$add(wait, list(x = i/10)) } out <- queue$run(message = \"verbose\") #> → Task done: task_1 (0.17s) #> → Task done: task_2 (0.3s) #> → Task done: task_3 (0.36s) #> → Task done: task_4 (0.48s) #> → Task done: task_5 (0.53s) #> → Task done: task_6 (0.64s) #> → Task done: task_7 (0.76s) #> → Task done: task_8 (0.86s) #> → Task done: task_9 (0.97s) #> → Task done: task_10 (1.07s) #> ✔ Queue complete: 10 tasks done (2.03s) out #> # A tibble: 10 × 17 #>    task_id worker_id state result runtime fun   args         created             #>    <chr>       <int> <chr> <list> <drtn>  <lis> <list>       <dttm>              #>  1 task_1     335633 done  <dbl>  0.1723… <fn>  <named list> 2022-12-21 16:43:57 #>  2 task_2     335645 done  <dbl>  0.2955… <fn>  <named list> 2022-12-21 16:43:57 #>  3 task_3     335657 done  <dbl>  0.3587… <fn>  <named list> 2022-12-21 16:43:57 #>  4 task_4     335669 done  <dbl>  0.4754… <fn>  <named list> 2022-12-21 16:43:57 #>  5 task_5     335633 done  <dbl>  0.5304… <fn>  <named list> 2022-12-21 16:43:57 #>  6 task_6     335645 done  <dbl>  0.6419… <fn>  <named list> 2022-12-21 16:43:57 #>  7 task_7     335657 done  <dbl>  0.7579… <fn>  <named list> 2022-12-21 16:43:57 #>  8 task_8     335669 done  <dbl>  0.8647… <fn>  <named list> 2022-12-21 16:43:57 #>  9 task_9     335633 done  <dbl>  0.9653… <fn>  <named list> 2022-12-21 16:43:57 #> 10 task_10    335645 done  <dbl>  1.0666… <fn>  <named list> 2022-12-21 16:43:57 #> # … with 9 more variables: queued <dttm>, assigned <dttm>, started <dttm>, #> #   finished <dttm>, code <int>, message <chr>, stdout <list>, stderr <list>, #> #   error <list> unlist(out$result) #>  [1] 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0"},{"path":"http://queue.djnavarro.net/reference/Queue.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 Class Representing a Multi-Worker Task Queue — Queue","title":"R6 Class Representing a Multi-Worker Task Queue — Queue","text":"Queue executes tasks concurrently using multiple workers.","code":""},{"path":"http://queue.djnavarro.net/reference/Queue.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class Representing a Multi-Worker Task Queue — Queue","text":"Queue class primary interface provided queue package. allows users execute arbitrary collection tasks parallel across multiple R sessions, managed automatically background. new queue initialised, tasks can added queue using add() method. tasks added, executed parallel calling run() method. completed, run() returns tibble contains results tasks, additional metadata besides. Internally, Queue uses TaskList object data store WorkerPool object execute tasks parallel. objects can accessed calling get_tasks() method get_workers() methods. Usually need , occasionally can useful objects handy methods allow finer-grained control (see documentation TaskList WorkerPool respectively).","code":""},{"path":[]},{"path":"http://queue.djnavarro.net/reference/Queue.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 Class Representing a Multi-Worker Task Queue — Queue","text":"Queue$new() Queue$add() Queue$run() Queue$get_workers() Queue$get_tasks() Queue$clone()","code":""},{"path":"http://queue.djnavarro.net/reference/Queue.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 Class Representing a Multi-Worker Task Queue — Queue","text":"Create task queue","code":""},{"path":"http://queue.djnavarro.net/reference/Queue.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Multi-Worker Task Queue — Queue","text":"","code":"Queue$new(workers = 4L)"},{"path":"http://queue.djnavarro.net/reference/Queue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a Multi-Worker Task Queue — Queue","text":"workers Either number workers employ task queue, WorkerPool object use deploying tasks.","code":""},{"path":"http://queue.djnavarro.net/reference/Queue.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a Multi-Worker Task Queue — Queue","text":"new Queue object","code":""},{"path":"http://queue.djnavarro.net/reference/Queue.html","id":"method-add-","dir":"Reference","previous_headings":"","what":"Method add()","title":"R6 Class Representing a Multi-Worker Task Queue — Queue","text":"Adds task queue","code":""},{"path":"http://queue.djnavarro.net/reference/Queue.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Multi-Worker Task Queue — Queue","text":"","code":"Queue$add(fun, args = list(), id = NULL)"},{"path":"http://queue.djnavarro.net/reference/Queue.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a Multi-Worker Task Queue — Queue","text":"fun function called task scheduled args list arguments passed task function (optional) id string specifying unique identifier task (optional: tasks named \"task_1\", \"task_2\", etc unspecified)","code":""},{"path":"http://queue.djnavarro.net/reference/Queue.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a Multi-Worker Task Queue — Queue","text":"Invisibly returns Task object","code":""},{"path":"http://queue.djnavarro.net/reference/Queue.html","id":"method-run-","dir":"Reference","previous_headings":"","what":"Method run()","title":"R6 Class Representing a Multi-Worker Task Queue — Queue","text":"Execute tasks parallel using worker pool, assigning tasks workers order added queue","code":""},{"path":"http://queue.djnavarro.net/reference/Queue.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Multi-Worker Task Queue — Queue","text":"","code":"Queue$run(   timelimit = 60,   message = \"minimal\",   interval = 0.05,   shutdown = TRUE )"},{"path":"http://queue.djnavarro.net/reference/Queue.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a Multi-Worker Task Queue — Queue","text":"timelimit long (seconds) worker pool wait task complete terminating child process moving onto next task? (default 60 seconds, fairly arbitrary) message messages reported queue running? Options \"none\" (messages), \"minimal\" (spinner shown alongside counts waiting, running, completed tasks), \"verbose\" (addition spinner, task summarized completes). Default \"minimal\". interval often task queue poll workers see finished assigned tasks? Specified seconds. shutdown workers pool shut (.e., R sessions closed) tasks completed. Defaults TRUE.","code":""},{"path":"http://queue.djnavarro.net/reference/Queue.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a Multi-Worker Task Queue — Queue","text":"Returns tibble containing results tasks various useful metadata. Contains one row per task Queue, following columns: task_id character string specifying task identifiers worker_id integer specifying worker process ids (pid) state character string indicating status task (\"created\", \"waiting\", \"assigned\", \"running\", \"done\") result list containing function outputs, NULL runtime Completion time task (NA task done) fun list containing functions args list containing arguments passed function created time task created queued time task added Queue assigned time task assigned Worker started time Worker called function finished time Worker output returned task code status code returned callr R session (integer) message message returned callr R session (character) stdout List column containing contents stdout function execution stderr List column containing contents stderr function execution error  List column containing NULL values Note: present one field callr rsession::read() method captured , error field. add finished wrapping head around actually . error column, present, included placeholder","code":""},{"path":"http://queue.djnavarro.net/reference/Queue.html","id":"method-get-workers-","dir":"Reference","previous_headings":"","what":"Method get_workers()","title":"R6 Class Representing a Multi-Worker Task Queue — Queue","text":"Retrieve workers","code":""},{"path":"http://queue.djnavarro.net/reference/Queue.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Multi-Worker Task Queue — Queue","text":"","code":"Queue$get_workers()"},{"path":"http://queue.djnavarro.net/reference/Queue.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a Multi-Worker Task Queue — Queue","text":"WorkerPool object","code":""},{"path":"http://queue.djnavarro.net/reference/Queue.html","id":"method-get-tasks-","dir":"Reference","previous_headings":"","what":"Method get_tasks()","title":"R6 Class Representing a Multi-Worker Task Queue — Queue","text":"Retrieve tasks","code":""},{"path":"http://queue.djnavarro.net/reference/Queue.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Multi-Worker Task Queue — Queue","text":"","code":"Queue$get_tasks()"},{"path":"http://queue.djnavarro.net/reference/Queue.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a Multi-Worker Task Queue — Queue","text":"TaskList object","code":""},{"path":"http://queue.djnavarro.net/reference/Queue.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 Class Representing a Multi-Worker Task Queue — Queue","text":"objects class cloneable method.","code":""},{"path":"http://queue.djnavarro.net/reference/Queue.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Multi-Worker Task Queue — Queue","text":"","code":"Queue$clone(deep = FALSE)"},{"path":"http://queue.djnavarro.net/reference/Queue.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a Multi-Worker Task Queue — Queue","text":"deep Whether make deep clone.","code":""},{"path":"http://queue.djnavarro.net/reference/Queue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class Representing a Multi-Worker Task Queue — Queue","text":"","code":"queue <- Queue$new(workers = 4L) wait <- function(x) Sys.sleep(runif(1)) for(i in 1:6) queue$add(wait) queue$run() #> ✔ Queue complete: 6 tasks done (1.07s) #> # A tibble: 6 × 17 #>   task_id worker_id state result runtime        fun   args   created             #>   <chr>       <int> <chr> <list> <drtn>         <lis> <list> <dttm>              #> 1 task_1       6471 done  <NULL> 0.07155013 se… <fn>  <list> 2022-12-21 06:46:23 #> 2 task_2       6486 done  <NULL> 1.04275489 se… <fn>  <list> 2022-12-21 06:46:23 #> 3 task_3       6500 done  <NULL> 0.62054133 se… <fn>  <list> 2022-12-21 06:46:23 #> 4 task_4       6514 done  <NULL> 0.56510258 se… <fn>  <list> 2022-12-21 06:46:23 #> 5 task_5       6471 done  <NULL> 0.23473048 se… <fn>  <list> 2022-12-21 06:46:23 #> 6 task_6       6471 done  <NULL> 0.37749696 se… <fn>  <list> 2022-12-21 06:46:23 #> # … with 9 more variables: queued <dttm>, assigned <dttm>, started <dttm>, #> #   finished <dttm>, code <int>, message <chr>, stdout <list>, stderr <list>, #> #   error <list>"},{"path":"http://queue.djnavarro.net/reference/Task.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 Class Representing a Task — Task","title":"R6 Class Representing a Task — Task","text":"Task stores function, arguments, output, metadata.","code":""},{"path":"http://queue.djnavarro.net/reference/Task.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class Representing a Task — Task","text":"Task object used storage class. container used hold R function arguments passed function. can also hold output returned function, anything printed stdout stderr function called, various metadata process id worker executed function, timestamps, . methods Task objects fall two groups, roughly speaking. get_*() methods used return information Task, register_*() methods used register information related events relevant Task status. retrieve() method special, returns tibble containing information stored task. Objects hierarchy use method return nicely organised output summarise results many tasks.","code":""},{"path":[]},{"path":"http://queue.djnavarro.net/reference/Task.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 Class Representing a Task — Task","text":"Task$new() Task$retrieve() Task$get_task_fun() Task$get_task_args() Task$get_task_state() Task$get_task_id() Task$get_task_runtime() Task$register_task_created() Task$register_task_waiting() Task$register_task_assigned() Task$register_task_running() Task$register_task_done() Task$clone()","code":""},{"path":"http://queue.djnavarro.net/reference/Task.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 Class Representing a Task — Task","text":"Create new task. Conceptually, Task viewed function executed Worker assigned, generally expected resources function requires passed arguments since execution context different R session one function defined.","code":""},{"path":"http://queue.djnavarro.net/reference/Task.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Task — Task","text":"","code":"Task$new(fun, args = list(), id = NULL)"},{"path":"http://queue.djnavarro.net/reference/Task.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a Task — Task","text":"fun function called task executes. args list arguments passed function (optional). id string specifying unique task identifier (optional).","code":""},{"path":"http://queue.djnavarro.net/reference/Task.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a Task — Task","text":"new Task object.","code":""},{"path":"http://queue.djnavarro.net/reference/Task.html","id":"method-retrieve-","dir":"Reference","previous_headings":"","what":"Method retrieve()","title":"R6 Class Representing a Task — Task","text":"Retrieve tidy summary task state.","code":""},{"path":"http://queue.djnavarro.net/reference/Task.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Task — Task","text":"","code":"Task$retrieve()"},{"path":"http://queue.djnavarro.net/reference/Task.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a Task — Task","text":"tibble containing single row, following columns: task_id character string specifying task identifier worker_id integer specifying worker process id (pid) state character string indicating task status (\"created\", \"waiting\", \"assigned\", \"running\", \"done\") result list containing function output, NULL runtime Completion time task (NA task done) fun list containing function args list containing arguments created time task created queued time task added Queue assigned time task assigned Worker started time Worker called function finished time Worker output returned code status code returned callr R session (integer) message message returned callr R session (character) stdout List containing contents stdout function execution stderr List containing contents stderr function execution error  List containing NULL Note: present one field callr rsession::read() method captured , error field. add finished wrapping head around actually . error column, present, included placeholder","code":""},{"path":"http://queue.djnavarro.net/reference/Task.html","id":"method-get-task-fun-","dir":"Reference","previous_headings":"","what":"Method get_task_fun()","title":"R6 Class Representing a Task — Task","text":"Retrieve task function.","code":""},{"path":"http://queue.djnavarro.net/reference/Task.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Task — Task","text":"","code":"Task$get_task_fun()"},{"path":"http://queue.djnavarro.net/reference/Task.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a Task — Task","text":"function.","code":""},{"path":"http://queue.djnavarro.net/reference/Task.html","id":"method-get-task-args-","dir":"Reference","previous_headings":"","what":"Method get_task_args()","title":"R6 Class Representing a Task — Task","text":"Retrieve task arguments","code":""},{"path":"http://queue.djnavarro.net/reference/Task.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Task — Task","text":"","code":"Task$get_task_args()"},{"path":"http://queue.djnavarro.net/reference/Task.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a Task — Task","text":"list.","code":""},{"path":"http://queue.djnavarro.net/reference/Task.html","id":"method-get-task-state-","dir":"Reference","previous_headings":"","what":"Method get_task_state()","title":"R6 Class Representing a Task — Task","text":"Retrieve task state.","code":""},{"path":"http://queue.djnavarro.net/reference/Task.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Task — Task","text":"","code":"Task$get_task_state()"},{"path":"http://queue.djnavarro.net/reference/Task.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a Task — Task","text":"string specifying current state task. Possible values \"created\" (task exists), \"waiting\" (task exists waiting queue), \"assigned\" (task assigned worker yet started), \"running\" (task running worker), \"done\" (task completed results assigned back task object)","code":""},{"path":"http://queue.djnavarro.net/reference/Task.html","id":"method-get-task-id-","dir":"Reference","previous_headings":"","what":"Method get_task_id()","title":"R6 Class Representing a Task — Task","text":"Retrieve task id.","code":""},{"path":"http://queue.djnavarro.net/reference/Task.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Task — Task","text":"","code":"Task$get_task_id()"},{"path":"http://queue.djnavarro.net/reference/Task.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a Task — Task","text":"string containing task identifier.","code":""},{"path":"http://queue.djnavarro.net/reference/Task.html","id":"method-get-task-runtime-","dir":"Reference","previous_headings":"","what":"Method get_task_runtime()","title":"R6 Class Representing a Task — Task","text":"Retrieve task runtime.","code":""},{"path":"http://queue.djnavarro.net/reference/Task.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Task — Task","text":"","code":"Task$get_task_runtime()"},{"path":"http://queue.djnavarro.net/reference/Task.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a Task — Task","text":"task completed, difftime value. task yet complete, NA value returned","code":""},{"path":"http://queue.djnavarro.net/reference/Task.html","id":"method-register-task-created-","dir":"Reference","previous_headings":"","what":"Method register_task_created()","title":"R6 Class Representing a Task — Task","text":"Register task creation updating internal storage. method called, state Task set \"created\" timestamp recorded, registering creation time task. method intended called Worker objects. Users need call .","code":""},{"path":"http://queue.djnavarro.net/reference/Task.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Task — Task","text":"","code":"Task$register_task_created()"},{"path":"http://queue.djnavarro.net/reference/Task.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a Task — Task","text":"Returns NULL invisibly.","code":""},{"path":"http://queue.djnavarro.net/reference/Task.html","id":"method-register-task-waiting-","dir":"Reference","previous_headings":"","what":"Method register_task_waiting()","title":"R6 Class Representing a Task — Task","text":"Register addition task queue updating internal storage. method called, state Task set \"waiting\" timestamp recorded, registering time task added queue. method intended called Worker objects. Users need call .","code":""},{"path":"http://queue.djnavarro.net/reference/Task.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Task — Task","text":"","code":"Task$register_task_waiting()"},{"path":"http://queue.djnavarro.net/reference/Task.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a Task — Task","text":"Returns NULL invisibly.","code":""},{"path":"http://queue.djnavarro.net/reference/Task.html","id":"method-register-task-assigned-","dir":"Reference","previous_headings":"","what":"Method register_task_assigned()","title":"R6 Class Representing a Task — Task","text":"Register assignment task worker updating internal storage. method called, state Task set \"assigned\" timestamp recorded, registering time task assigned Worker. addition, worker_id worker object (also pid) registered task. method intended called Worker objects. Users need call .","code":""},{"path":"http://queue.djnavarro.net/reference/Task.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Task — Task","text":"","code":"Task$register_task_assigned(worker_id)"},{"path":"http://queue.djnavarro.net/reference/Task.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a Task — Task","text":"worker_id Identifier worker task assigned.","code":""},{"path":"http://queue.djnavarro.net/reference/Task.html","id":"returns-9","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a Task — Task","text":"Returns NULL invisibly.","code":""},{"path":"http://queue.djnavarro.net/reference/Task.html","id":"method-register-task-running-","dir":"Reference","previous_headings":"","what":"Method register_task_running()","title":"R6 Class Representing a Task — Task","text":"Register commencement task worker updating internal storage. method called, state Task set \"running\" timestamp recorded, registering time Worker called task function. addition, worker_id recorded, albeit somewhat unnecessarily since information likely already stored register_task_assigned() called. method intended called Worker objects. Users need call .","code":""},{"path":"http://queue.djnavarro.net/reference/Task.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Task — Task","text":"","code":"Task$register_task_running(worker_id)"},{"path":"http://queue.djnavarro.net/reference/Task.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a Task — Task","text":"worker_id Identifier worker task starting.","code":""},{"path":"http://queue.djnavarro.net/reference/Task.html","id":"returns-10","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a Task — Task","text":"Returns NULL invisibly.","code":""},{"path":"http://queue.djnavarro.net/reference/Task.html","id":"method-register-task-done-","dir":"Reference","previous_headings":"","what":"Method register_task_done()","title":"R6 Class Representing a Task — Task","text":"Register finishing task worker updating internal storage. method called, state Task set \"done\" timestamp recorded, registering time Worker returned results Task. results object read R session, stored locally Task time. method intended called Worker objects. Users need call .","code":""},{"path":"http://queue.djnavarro.net/reference/Task.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Task — Task","text":"","code":"Task$register_task_done(results)"},{"path":"http://queue.djnavarro.net/reference/Task.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a Task — Task","text":"results Results read R session.","code":""},{"path":"http://queue.djnavarro.net/reference/Task.html","id":"returns-11","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a Task — Task","text":"Returns NULL invisibly.","code":""},{"path":"http://queue.djnavarro.net/reference/Task.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 Class Representing a Task — Task","text":"objects class cloneable method.","code":""},{"path":"http://queue.djnavarro.net/reference/Task.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Task — Task","text":"","code":"Task$clone(deep = FALSE)"},{"path":"http://queue.djnavarro.net/reference/Task.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a Task — Task","text":"deep Whether make deep clone.","code":""},{"path":"http://queue.djnavarro.net/reference/TaskList.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 Class Representing a Task List — TaskList","title":"R6 Class Representing a Task List — TaskList","text":"TaskList stores retrieves one tasks.","code":""},{"path":"http://queue.djnavarro.net/reference/TaskList.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class Representing a Task List — TaskList","text":"TaskList class used storage class. provides container holds collection Task objects, along collection methods adding, removing, getting Tasks. can also report status Tasks contained within list retrieve results Tasks. manage interactions Workers arrange Tasks executed. job Queue.","code":""},{"path":[]},{"path":"http://queue.djnavarro.net/reference/TaskList.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 Class Representing a Task List — TaskList","text":"TaskList$new() TaskList$length() TaskList$add_task() TaskList$remove_task() TaskList$get_task() TaskList$get_state() TaskList$get_tasks_in_state() TaskList$retrieve() TaskList$clone()","code":""},{"path":"http://queue.djnavarro.net/reference/TaskList.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 Class Representing a Task List — TaskList","text":"Create new task list","code":""},{"path":"http://queue.djnavarro.net/reference/TaskList.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Task List — TaskList","text":"","code":"TaskList$new()"},{"path":"http://queue.djnavarro.net/reference/TaskList.html","id":"method-length-","dir":"Reference","previous_headings":"","what":"Method length()","title":"R6 Class Representing a Task List — TaskList","text":"Return number tasks list","code":""},{"path":"http://queue.djnavarro.net/reference/TaskList.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Task List — TaskList","text":"","code":"TaskList$length()"},{"path":"http://queue.djnavarro.net/reference/TaskList.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a Task List — TaskList","text":"Integer","code":""},{"path":"http://queue.djnavarro.net/reference/TaskList.html","id":"method-add-task-","dir":"Reference","previous_headings":"","what":"Method add_task()","title":"R6 Class Representing a Task List — TaskList","text":"Add task TaskList","code":""},{"path":"http://queue.djnavarro.net/reference/TaskList.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Task List — TaskList","text":"","code":"TaskList$add_task(task)"},{"path":"http://queue.djnavarro.net/reference/TaskList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a Task List — TaskList","text":"task Task object added","code":""},{"path":"http://queue.djnavarro.net/reference/TaskList.html","id":"method-remove-task-","dir":"Reference","previous_headings":"","what":"Method remove_task()","title":"R6 Class Representing a Task List — TaskList","text":"method removes one tasks TaskList.","code":""},{"path":"http://queue.djnavarro.net/reference/TaskList.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Task List — TaskList","text":"","code":"TaskList$remove_task(x)"},{"path":"http://queue.djnavarro.net/reference/TaskList.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a Task List — TaskList","text":"x Indices tasks removed","code":""},{"path":"http://queue.djnavarro.net/reference/TaskList.html","id":"method-get-task-","dir":"Reference","previous_headings":"","what":"Method get_task()","title":"R6 Class Representing a Task List — TaskList","text":"Return single Task contained TaskList. Task removed TaskList, reference semantics: listed task completed Worker, status Task returned method update automatically","code":""},{"path":"http://queue.djnavarro.net/reference/TaskList.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Task List — TaskList","text":"","code":"TaskList$get_task(x)"},{"path":"http://queue.djnavarro.net/reference/TaskList.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a Task List — TaskList","text":"x index task return","code":""},{"path":"http://queue.djnavarro.net/reference/TaskList.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a Task List — TaskList","text":"Task object","code":""},{"path":"http://queue.djnavarro.net/reference/TaskList.html","id":"method-get-state-","dir":"Reference","previous_headings":"","what":"Method get_state()","title":"R6 Class Representing a Task List — TaskList","text":"Return status tasks TaskList. requested, method also display messages summarising current state tasks, tasks completed since last time status returned. messaging system called Queue objects work tasks","code":""},{"path":"http://queue.djnavarro.net/reference/TaskList.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Task List — TaskList","text":"","code":"TaskList$get_state(message = \"none\", finished_in = NULL)"},{"path":"http://queue.djnavarro.net/reference/TaskList.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a Task List — TaskList","text":"message Character specifying type message display: \"none\" (default), \"minimal\", \"verbose\" finished_in numeric value difftime specifying long tasks taken complete. argument used displaying messages, used trigger display tidy \"tasks completed\" style message. purely cosmetic affect task status.","code":""},{"path":"http://queue.djnavarro.net/reference/TaskList.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a Task List — TaskList","text":"character vector specifying completion status listed tasks","code":""},{"path":"http://queue.djnavarro.net/reference/TaskList.html","id":"method-get-tasks-in-state-","dir":"Reference","previous_headings":"","what":"Method get_tasks_in_state()","title":"R6 Class Representing a Task List — TaskList","text":"Return list tasks given state","code":""},{"path":"http://queue.djnavarro.net/reference/TaskList.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Task List — TaskList","text":"","code":"TaskList$get_tasks_in_state(x)"},{"path":"http://queue.djnavarro.net/reference/TaskList.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a Task List — TaskList","text":"x name state (e.g., \"waiting\")","code":""},{"path":"http://queue.djnavarro.net/reference/TaskList.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a Task List — TaskList","text":"TaskList object","code":""},{"path":"http://queue.djnavarro.net/reference/TaskList.html","id":"method-retrieve-","dir":"Reference","previous_headings":"","what":"Method retrieve()","title":"R6 Class Representing a Task List — TaskList","text":"Retrieves current state tasks.","code":""},{"path":"http://queue.djnavarro.net/reference/TaskList.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Task List — TaskList","text":"","code":"TaskList$retrieve()"},{"path":"http://queue.djnavarro.net/reference/TaskList.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a Task List — TaskList","text":"Returns tibble containing results tasks various useful metadata. Contains one row per task TaskList, following columns: task_id character string specifying task identifiers worker_id integer specifying worker process ids (pid) state character string indicating status task (\"created\", \"waiting\", \"assigned\", \"running\", \"done\") result list containing function outputs, NULL runtime Completion time task (NA task done) fun list containing functions args list containing arguments passed function created time task created queued time task added Queue assigned time task assigned Worker started time Worker called function finished time Worker output returned task code status code returned callr R session (integer) message message returned callr R session (character) stdout List column containing contents stdout function execution stderr List column containing contents stderr function execution error  List column containing NULL values tasks completed output output run() method Queue object. Note: present one field callr rsession::read() method captured , error field. add finished wrapping head around actually . error column, present, included placeholder","code":""},{"path":"http://queue.djnavarro.net/reference/TaskList.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 Class Representing a Task List — TaskList","text":"objects class cloneable method.","code":""},{"path":"http://queue.djnavarro.net/reference/TaskList.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Task List — TaskList","text":"","code":"TaskList$clone(deep = FALSE)"},{"path":"http://queue.djnavarro.net/reference/TaskList.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a Task List — TaskList","text":"deep Whether make deep clone.","code":""},{"path":"http://queue.djnavarro.net/reference/Worker.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 Class Representing a Worker — Worker","title":"R6 Class Representing a Worker — Worker","text":"Worker manages external R session completes tasks.","code":""},{"path":"http://queue.djnavarro.net/reference/Worker.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class Representing a Worker — Worker","text":"Worker class interacts external R session, possesses methods allow work Task objects. core, class thin wrapper around callr::r_session object, fact session object can obtained calling get_worker_session() method. cases necessary however, Worker objects typically created part WorkerPool managed Queue, higher level structures use methods exposed Worker object.","code":""},{"path":[]},{"path":"http://queue.djnavarro.net/reference/Worker.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 Class Representing a Worker — Worker","text":"Worker$new() Worker$get_worker_id() Worker$get_worker_state() Worker$get_worker_runtime() Worker$get_worker_task() Worker$get_worker_session() Worker$try_assign() Worker$try_start() Worker$try_finish() Worker$shutdown_worker() Worker$clone()","code":""},{"path":"http://queue.djnavarro.net/reference/Worker.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 Class Representing a Worker — Worker","text":"Create new worker object.","code":""},{"path":"http://queue.djnavarro.net/reference/Worker.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Worker — Worker","text":"","code":"Worker$new()"},{"path":"http://queue.djnavarro.net/reference/Worker.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a Worker — Worker","text":"new Worker object.","code":""},{"path":"http://queue.djnavarro.net/reference/Worker.html","id":"method-get-worker-id-","dir":"Reference","previous_headings":"","what":"Method get_worker_id()","title":"R6 Class Representing a Worker — Worker","text":"Retrieve worker identifier.","code":""},{"path":"http://queue.djnavarro.net/reference/Worker.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Worker — Worker","text":"","code":"Worker$get_worker_id()"},{"path":"http://queue.djnavarro.net/reference/Worker.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a Worker — Worker","text":"worker identifier, also process id R session","code":""},{"path":"http://queue.djnavarro.net/reference/Worker.html","id":"method-get-worker-state-","dir":"Reference","previous_headings":"","what":"Method get_worker_state()","title":"R6 Class Representing a Worker — Worker","text":"Retrieve worker state.","code":""},{"path":"http://queue.djnavarro.net/reference/Worker.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Worker — Worker","text":"","code":"Worker$get_worker_state()"},{"path":"http://queue.djnavarro.net/reference/Worker.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a Worker — Worker","text":"string specifying current state R session. Possible values : \"starting\": R session starting . \"idle\": R session ready compute. \"busy\": R session computing. \"finished\": R session terminated. Importantly, note task function still running task function essentially finished waiting return return \"busy\". distinguish two cases need use poll_process() method callr::rsession, returned get_worker_session().","code":""},{"path":"http://queue.djnavarro.net/reference/Worker.html","id":"method-get-worker-runtime-","dir":"Reference","previous_headings":"","what":"Method get_worker_runtime()","title":"R6 Class Representing a Worker — Worker","text":"Return total length time worker session running, length time current task running. session finished values NA. session idle (task running) total session time return value current task time NA.","code":""},{"path":"http://queue.djnavarro.net/reference/Worker.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Worker — Worker","text":"","code":"Worker$get_worker_runtime()"},{"path":"http://queue.djnavarro.net/reference/Worker.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a Worker — Worker","text":"vector two difftimes.","code":""},{"path":"http://queue.djnavarro.net/reference/Worker.html","id":"method-get-worker-task-","dir":"Reference","previous_headings":"","what":"Method get_worker_task()","title":"R6 Class Representing a Worker — Worker","text":"Retrieve task assigned worker.","code":""},{"path":"http://queue.djnavarro.net/reference/Worker.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Worker — Worker","text":"","code":"Worker$get_worker_task()"},{"path":"http://queue.djnavarro.net/reference/Worker.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a Worker — Worker","text":"Task object currently assigned Worker, NULL.","code":""},{"path":"http://queue.djnavarro.net/reference/Worker.html","id":"method-get-worker-session-","dir":"Reference","previous_headings":"","what":"Method get_worker_session()","title":"R6 Class Representing a Worker — Worker","text":"Retrieve R session associated Worker","code":""},{"path":"http://queue.djnavarro.net/reference/Worker.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Worker — Worker","text":"","code":"Worker$get_worker_session()"},{"path":"http://queue.djnavarro.net/reference/Worker.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a Worker — Worker","text":"R session object, see callr::r_session","code":""},{"path":"http://queue.djnavarro.net/reference/Worker.html","id":"method-try-assign-","dir":"Reference","previous_headings":"","what":"Method try_assign()","title":"R6 Class Representing a Worker — Worker","text":"Attempt assign task worker. method checks task worker appropriate state. , objects register connection . method intended called WorkerPool Queue.","code":""},{"path":"http://queue.djnavarro.net/reference/Worker.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Worker — Worker","text":"","code":"Worker$try_assign(task)"},{"path":"http://queue.djnavarro.net/reference/Worker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a Worker — Worker","text":"task Task object corresponding --assigned task.","code":""},{"path":"http://queue.djnavarro.net/reference/Worker.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a Worker — Worker","text":"Invisibly returns TRUE FALSE, depending whether attempt successful.","code":""},{"path":"http://queue.djnavarro.net/reference/Worker.html","id":"method-try-start-","dir":"Reference","previous_headings":"","what":"Method try_start()","title":"R6 Class Representing a Worker — Worker","text":"Attempt start task. method checks see worker assigned task, starts running within R session. also registers change status within Task object . method intended called WorkerPool Queue.","code":""},{"path":"http://queue.djnavarro.net/reference/Worker.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Worker — Worker","text":"","code":"Worker$try_start()"},{"path":"http://queue.djnavarro.net/reference/Worker.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a Worker — Worker","text":"Invisibly returns TRUE FALSE, depending whether attempt successful.","code":""},{"path":"http://queue.djnavarro.net/reference/Worker.html","id":"method-try-finish-","dir":"Reference","previous_headings":"","what":"Method try_finish()","title":"R6 Class Representing a Worker — Worker","text":"Attempt finish running task politely. method checks see worker running task, polls R session determine R process claims ready return. ready--return task results read R process returned Task object. task status updated, unassigned Worker. method intended called WorkerPool Queue.","code":""},{"path":"http://queue.djnavarro.net/reference/Worker.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Worker — Worker","text":"","code":"Worker$try_finish(timeout = 0)"},{"path":"http://queue.djnavarro.net/reference/Worker.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a Worker — Worker","text":"timeout Length time wait process polled (default = 0)","code":""},{"path":"http://queue.djnavarro.net/reference/Worker.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a Worker — Worker","text":"Invisibly returns TRUE FALSE, depending whether attempt successful.","code":""},{"path":"http://queue.djnavarro.net/reference/Worker.html","id":"method-shutdown-worker-","dir":"Reference","previous_headings":"","what":"Method shutdown_worker()","title":"R6 Class Representing a Worker — Worker","text":"Attempt shut R session gracefully, making attempt salvage task worker believes assigned. salvage operation depends state task. Task assigned started, Worker return \"waiting\" state hope Queue assign another worker later, unassign . Task running, Worker attempt read R session register Task \"done\" regardless outcome. (reason ensure tasks crash freeze R session get returned Queue).","code":""},{"path":"http://queue.djnavarro.net/reference/Worker.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Worker — Worker","text":"","code":"Worker$shutdown_worker(grace = 1000)"},{"path":"http://queue.djnavarro.net/reference/Worker.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a Worker — Worker","text":"grace Grace period milliseconds. process still running period, killed.","code":""},{"path":"http://queue.djnavarro.net/reference/Worker.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 Class Representing a Worker — Worker","text":"objects class cloneable method.","code":""},{"path":"http://queue.djnavarro.net/reference/Worker.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Worker — Worker","text":"","code":"Worker$clone(deep = FALSE)"},{"path":"http://queue.djnavarro.net/reference/Worker.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a Worker — Worker","text":"deep Whether make deep clone.","code":""},{"path":"http://queue.djnavarro.net/reference/WorkerPool.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 Class Representing a Worker Pool — WorkerPool","title":"R6 Class Representing a Worker Pool — WorkerPool","text":"WorkerPool manages multiple workers.","code":""},{"path":"http://queue.djnavarro.net/reference/WorkerPool.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class Representing a Worker Pool — WorkerPool","text":"implementation WorkerPool essentially container holds one Worker objects, posesses methods allow instruct assign, start, complete Tasks. can also check see R sessions associated Workers crashed stalled, replace needed.","code":""},{"path":[]},{"path":"http://queue.djnavarro.net/reference/WorkerPool.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 Class Representing a Worker Pool — WorkerPool","text":"WorkerPool$new() WorkerPool$get_pool_worker() WorkerPool$get_pool_state() WorkerPool$try_assign() WorkerPool$try_start() WorkerPool$try_finish() WorkerPool$refill_pool() WorkerPool$shutdown_pool() WorkerPool$shutdown_overdue_workers() WorkerPool$clone()","code":""},{"path":"http://queue.djnavarro.net/reference/WorkerPool.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 Class Representing a Worker Pool — WorkerPool","text":"Create new worker pool","code":""},{"path":"http://queue.djnavarro.net/reference/WorkerPool.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Worker Pool — WorkerPool","text":"","code":"WorkerPool$new(workers = 4L)"},{"path":"http://queue.djnavarro.net/reference/WorkerPool.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a Worker Pool — WorkerPool","text":"workers number workers pool.","code":""},{"path":"http://queue.djnavarro.net/reference/WorkerPool.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a Worker Pool — WorkerPool","text":"new WorkerPool object.","code":""},{"path":"http://queue.djnavarro.net/reference/WorkerPool.html","id":"method-get-pool-worker-","dir":"Reference","previous_headings":"","what":"Method get_pool_worker()","title":"R6 Class Representing a Worker Pool — WorkerPool","text":"Return specific Worker","code":""},{"path":"http://queue.djnavarro.net/reference/WorkerPool.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Worker Pool — WorkerPool","text":"","code":"WorkerPool$get_pool_worker(x)"},{"path":"http://queue.djnavarro.net/reference/WorkerPool.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a Worker Pool — WorkerPool","text":"x integer specifying index worker pool.","code":""},{"path":"http://queue.djnavarro.net/reference/WorkerPool.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a Worker Pool — WorkerPool","text":"corresponding Worker object.","code":""},{"path":"http://queue.djnavarro.net/reference/WorkerPool.html","id":"method-get-pool-state-","dir":"Reference","previous_headings":"","what":"Method get_pool_state()","title":"R6 Class Representing a Worker Pool — WorkerPool","text":"Return summary worker pool","code":""},{"path":"http://queue.djnavarro.net/reference/WorkerPool.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Worker Pool — WorkerPool","text":"","code":"WorkerPool$get_pool_state()"},{"path":"http://queue.djnavarro.net/reference/WorkerPool.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a Worker Pool — WorkerPool","text":"named character vector specifying current state worker (\"starting\", \"idle\", \"busy\", \"finished\"). Names denote worker ids, interpretations return value follows: \"starting\": R session starting . \"idle\": R session ready compute. \"busy\": R session computing. \"finished\": R session terminated.","code":""},{"path":"http://queue.djnavarro.net/reference/WorkerPool.html","id":"method-try-assign-","dir":"Reference","previous_headings":"","what":"Method try_assign()","title":"R6 Class Representing a Worker Pool — WorkerPool","text":"Attempt assign tasks workers. method intended called Queue objects. called, method iterate tasks list workers pool, assigning tasks workers long idle workers waiting tasks. returns runs one resource . Note method assigns tasks workers: instruct workers start working tasks. job try_start().","code":""},{"path":"http://queue.djnavarro.net/reference/WorkerPool.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Worker Pool — WorkerPool","text":"","code":"WorkerPool$try_assign(tasks)"},{"path":"http://queue.djnavarro.net/reference/WorkerPool.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a Worker Pool — WorkerPool","text":"tasks TaskList object","code":""},{"path":"http://queue.djnavarro.net/reference/WorkerPool.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a Worker Pool — WorkerPool","text":"Invisibly returns NULL","code":""},{"path":"http://queue.djnavarro.net/reference/WorkerPool.html","id":"method-try-start-","dir":"Reference","previous_headings":"","what":"Method try_start()","title":"R6 Class Representing a Worker Pool — WorkerPool","text":"Iterates Workers pool asks start jobs assigned yet started. method intended called Queue objects.","code":""},{"path":"http://queue.djnavarro.net/reference/WorkerPool.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Worker Pool — WorkerPool","text":"","code":"WorkerPool$try_start()"},{"path":"http://queue.djnavarro.net/reference/WorkerPool.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a Worker Pool — WorkerPool","text":"Invisibly returns NULL","code":""},{"path":"http://queue.djnavarro.net/reference/WorkerPool.html","id":"method-try-finish-","dir":"Reference","previous_headings":"","what":"Method try_finish()","title":"R6 Class Representing a Worker Pool — WorkerPool","text":"Iterate Workers pool checks see busy sessions ready return results. , finishes tasks ensures results returned Task object. method intended called Queue objects.","code":""},{"path":"http://queue.djnavarro.net/reference/WorkerPool.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Worker Pool — WorkerPool","text":"","code":"WorkerPool$try_finish()"},{"path":"http://queue.djnavarro.net/reference/WorkerPool.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a Worker Pool — WorkerPool","text":"Invisibly returns NULL","code":""},{"path":"http://queue.djnavarro.net/reference/WorkerPool.html","id":"method-refill-pool-","dir":"Reference","previous_headings":"","what":"Method refill_pool()","title":"R6 Class Representing a Worker Pool — WorkerPool","text":"Check WorkerPool looking Workers crashed shutdown, replace fresh workers.","code":""},{"path":"http://queue.djnavarro.net/reference/WorkerPool.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Worker Pool — WorkerPool","text":"","code":"WorkerPool$refill_pool()"},{"path":"http://queue.djnavarro.net/reference/WorkerPool.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a Worker Pool — WorkerPool","text":"function called primarily side effect. returns named character documenting outcome, indicating current state worker: \"finished\" worker. Names denote worker ids.","code":""},{"path":"http://queue.djnavarro.net/reference/WorkerPool.html","id":"method-shutdown-pool-","dir":"Reference","previous_headings":"","what":"Method shutdown_pool()","title":"R6 Class Representing a Worker Pool — WorkerPool","text":"Terminate workers pool.","code":""},{"path":"http://queue.djnavarro.net/reference/WorkerPool.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Worker Pool — WorkerPool","text":"","code":"WorkerPool$shutdown_pool(grace = 1000)"},{"path":"http://queue.djnavarro.net/reference/WorkerPool.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a Worker Pool — WorkerPool","text":"grace Grace period milliseconds. worker process still running period, killed.","code":""},{"path":"http://queue.djnavarro.net/reference/WorkerPool.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a Worker Pool — WorkerPool","text":"function called primarily side effect. returns named character documenting outcome, indicating current state worker: \"finished\" workers. Names denote worker ids.","code":""},{"path":"http://queue.djnavarro.net/reference/WorkerPool.html","id":"method-shutdown-overdue-workers-","dir":"Reference","previous_headings":"","what":"Method shutdown_overdue_workers()","title":"R6 Class Representing a Worker Pool — WorkerPool","text":"Terminate workers worked current task longer pre-specified time limit.","code":""},{"path":"http://queue.djnavarro.net/reference/WorkerPool.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Worker Pool — WorkerPool","text":"","code":"WorkerPool$shutdown_overdue_workers(timelimit, grace = 1000)"},{"path":"http://queue.djnavarro.net/reference/WorkerPool.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a Worker Pool — WorkerPool","text":"timelimit Pre-specified time limit task, seconds. grace Grace period shutdown, milliseconds. worker process still running period, killed.","code":""},{"path":"http://queue.djnavarro.net/reference/WorkerPool.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a Worker Pool — WorkerPool","text":"function called primarily side effect. returns named character documenting outcome, indicating current state worker: \"finished\" workers. Names denote worker ids.","code":""},{"path":"http://queue.djnavarro.net/reference/WorkerPool.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 Class Representing a Worker Pool — WorkerPool","text":"objects class cloneable method.","code":""},{"path":"http://queue.djnavarro.net/reference/WorkerPool.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Worker Pool — WorkerPool","text":"","code":"WorkerPool$clone(deep = FALSE)"},{"path":"http://queue.djnavarro.net/reference/WorkerPool.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a Worker Pool — WorkerPool","text":"deep Whether make deep clone.","code":""}]
